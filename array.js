// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —á–∏—Å–µ–ª —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, —É —è–∫–æ–º—É –≤—Å—ñ —á–∏—Å–ª–∞ –ø–æ–º–Ω–æ–∂–µ–Ω—ñ –Ω–∞ 2.

// function func(arr) {
//     if (!Array.isArray(arr)) {
//         return false;
//     }

//     let newArr = [];

//     for (let i = 0; i < arr.length; i++) {
//         newArr.push(arr[i] * 2)
//     }

//     return newArr;
// }

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ü–æ–¥—É–º–∞–π, —è–∫—ñ –º–µ—Ç–æ–¥–∏ –∞–±–æ —Ü–∏–∫–ª–∏ –º–æ–∂—É—Ç—å –¥–æ–ø–æ–º–æ–≥—Ç–∏ –ø–µ—Ä–µ–±—Ä–∞—Ç–∏ –º–∞—Å–∏–≤ —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —î —á–∏—Å–ª–æ –ø–∞—Ä–Ω–∏–º.

// function func(arr) {
//     if (!Array.isArray(arr)) {
//         return false;
//     }

//     let sum = 0;

//     for (let i = 0; i < arr.length; i++) {
//         if (arr[i] % 2 === 0) {
//             sum += arr[i]
//         }
//     }

//     return sum;
// }

// console.log(func(3))

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞.

// function func(arr) {
//     if (!Array.isArray(arr)) {
//         return false;
//     }

//     let newArr = [];
//     let count = {};

//     for (let i = 0; i < arr.length; i++) {
//         count[arr[i]] = (count[arr[i]] || 0) + 1
//     }

//     for (const key in count) {
//         if (count[key] > 1) {
//             newArr.push(Number(key))
//         }
//     }

//     return newArr;
// }

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å—É–º—É –≤—Å—ñ—Ö —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ.

// const arr = [10, 10, 10, 14];

// function func(arr) {
//     if (!Array.isArray(arr)) {
//         return false
//     }

//     let sum = 0;

//     arr.forEach(element => {
//         sum += element;
//     });

//     return sum;
// }

// —á–µ—Ä–µ–∑ reduce

// function func(arr) {
//     if (!Array.isArray(arr)) {
//         return false;
//     }

//     return arr.reduce((sum, element) => sum + element, 0);
// }

// console.log(func(arr))

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ó–Ω–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —Ç–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —É –º–∞—Å–∏–≤—ñ.

// const arr = [10, 55, 1, 44];

// function func(arr) {
//     if (!Array.isArray(arr)) {
//         return false
//     }

//     let maxEl = arr[0];
//     let minEl = arr[0];

//     arr.forEach(element => {
//         if (element > maxEl) {
//             maxEl = element
//         } else if(element < minEl) {
//             minEl = element;
//         }
//     });

//     return [minEl, maxEl];
// }

// console.log(func(arr))

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É —É–Ω—ñ–∫–∞–ª—å–Ω—ñ.

// const arr = [10, 11, 55, 1, 1, 44, 11, 12];

// function func(arr) {
//     let obj = {};
//     let result = [];

//     for (let i = 0; i < arr.length; i++) {
//         obj[arr[i]] = (obj[arr[i]] || 0) + 1;
//     }

//     for (let key in obj) {
//         if (obj[key] === 1) {
//             result.push(Number(key))
//         }
//     }

//     return result;
// }

// console.log(func(arr))

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ó–Ω–∞–π—Ç–∏ —Å–µ—Ä–µ–¥–Ω—î –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–µ —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ
// üëâ –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findAverage(arr), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –≤—Å—ñ—Ö —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ.

// function findAverage(arr) {
//     if (arr.length === 0) {
//         return [];
//     }

//     return arr.reduce((acc, num) => acc + num, 0) / arr.length
// }

// console.log(findAverage([10, 20, 30, 40, 50])); // 30
// console.log(findAverage([5, 15, 25])); // 15
// console.log(findAverage([])); // 0 (–Ø–∫—â–æ –º–∞—Å–∏–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø–æ–≤–µ—Ä–Ω–∏ 0)

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ —Å–ª—ñ–≤ —É –æ–¥–∏–Ω —Ä—è–¥–æ–∫
// üëâ –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é joinWords(words), —è–∫–∞ –æ–±'—î–¥–Ω—É—î –≤—Å—ñ —Å–ª–æ–≤–∞ —É —Ä—è–¥–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª.

// function joinWords(words) {
//     return words.reduce((acc, word) => acc + (acc ? " " : "") + word, "")
// }

// console.log(joinWords(["Hello", "world", "!"])); // "Hello world !"
// console.log(joinWords(["JavaScript", "is", "awesome"])); // "JavaScript is awesome"
// console.log(joinWords([])); // "" (–ü–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫, —è–∫—â–æ –º–∞—Å–∏–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π)

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∏ –º–∞—Å–∏–≤
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–≤–µ—Ä—Ç–∞—Ç–∏–º–µ –º–∞—Å–∏–≤ –±–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É reverse(). –¢–æ–±—Ç–æ –∑ –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—î —Å—Ç–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–º, –∑ –¥—Ä—É–≥–æ–≥–æ ‚Äî –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—ñ–º —ñ —Ç.–¥.

// function reverseArray(arr) {
//     if (arr.length === 0) {
//         return []
//     }

//     let result = [];

//     for (let i = arr.length - 1; i >= 0; i--) {
//         result.push(arr[i]);
//     }

//     return result;
// }

// console.log(reverseArray([1, 2, 3, 4]))  // –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ [4, 3, 2, 1]

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ó–Ω–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —ñ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —Ç–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –º–∞—Å–∏–≤—ñ. –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Math.max, Math.min –∞–±–æ –º–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤—ñ–≤.

// function findMinMax(arr) {
//     let min = Infinity;
//     let max = -Infinity;

//     for (let i = 0; i < arr.length; i++) {
//         if (arr[i] < min) {
//             min = arr[i]
//         }
//         if (arr[i] > max) {
//             max = arr[i]
//         }
//     }

//     return {min, max};
// }

// console.log(findMinMax([5, 3, 99, 1, 9, 1880, 7]))  // –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ {min: 1, max: 9}

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –í–∏–≤–µ—Å—Ç–∏ –≤—Å—ñ –ø–∞—Ä–Ω—ñ —á–∏—Å–ª–∞ –≤ –º–∞—Å–∏–≤—ñ
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–±–∏—Ä–∞—î –º–∞—Å–∏–≤ —ñ –≤–∏–≤–æ–¥–∏—Ç—å –ª–∏—à–µ –ø–∞—Ä–Ω—ñ —á–∏—Å–ª–∞ –±–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É filter.

// function findEvenNumbers(arr) {
//     let result = [];

//     for (let i = 0; i < arr.length; i++) {
//         if (arr[i] % 2 === 0) {
//             result.push(arr[i])
//         }
//     }

//     return result;
// }

// console.log(findEvenNumbers([1, 2, 3, 4, 5, 6])) // –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ [2, 4, 6]

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ü—ñ–¥—Å—É–º–æ–∫ –≤—Å—ñ—Ö —á–∏—Å–µ–ª
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Å—É–º—É –≤—Å—ñ—Ö —á–∏—Å–µ–ª –≤ –º–∞—Å–∏–≤—ñ, –æ–±—Ö–æ–¥—è—á–∏ –π–æ–≥–æ –≤—Ä—É—á–Ω—É.

// function sumArray(arr) {
//     return arr.reduce((acc, num) => acc + num, 0)
// }

// console.log(sumArray([1, 2, 3, 4])) // –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ 10

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É –æ–¥–Ω–∞–∫–æ–≤—ñ
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ –º–∞—Å–∏–≤—ñ –æ–¥–Ω–∞–∫–æ–≤—ñ (–±–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è every –∞–±–æ forEach).

// function checkEqual(arr) {
//     for (let i = 0; i < arr.length - 1; i++) {
//         if (arr[i] !== arr[i + 1]) {
//             return false
//         }
//     }

//     return true
// }

// console.log(checkEqual([5, 5, 5, 5]))  // –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ true
// console.log(checkEqual([5, 5, 6, 5]))  // –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ false

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ –º–∞—Å–∏–≤—ñ
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–¥–∞–ª—è—î –≤—Å—ñ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∑ –º–∞—Å–∏–≤—É –±–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤ filter —á–∏ Set.

// function removeDuplicates(arr) {
//     let result = [];

//     for (let i = 0; i < arr.length; i++) {
//         if(result.indexOf(arr[i]) === -1) {
//             result.push(arr[i])
//         }
//     }

//     return result;
// }

// console.log(removeDuplicates([1, 2, 2, 3, 3, 4]))  // –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ [1, 2, 3, 4]

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ó–Ω–∞–π—Ç–∏ —ñ–Ω–¥–µ–∫—Å –µ–ª–µ–º–µ–Ω—Ç–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —ñ–Ω–¥–µ–∫—Å –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å–∏–≤, –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ indexOf.

// function findIndex(arr, index) {
//     let res;

//     for (let i = 0; i < arr.length; i++) {
//         if(arr[i] === index) {
//             res = i
//         }
//     }

//     return res;
// }

// console.log(findIndex([1, 2, 3, 4], 3))  // –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ 2

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –í–∏–≤–µ—Å—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏, —â–æ –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑—É
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É, —è–∫—ñ –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑—É. –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ filter —á–∏ —ñ–Ω—à—ñ –º–µ—Ç–æ–¥–∏.

// function findDuplicates(arr) {
//     let count = {};
//     let result = [];

//     for (let i = 0; i < arr.length; i++) {
//         count[arr[i]] = (count[arr[i]] || 0) + 1;
//     }

//     for (let key in count) {
//         if (count[key] > 1) {
//             result.push(Number(key))
//         }
//     }

//     return result;
// }

// console.log(findDuplicates([1, 2, 3, 1, 4, 5, 2]))  // –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ [1, 2]

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –û–ø–∏—Å: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è—î –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º–∞—Å–∏–≤—É.
// –û–±–º–µ–∂–µ–Ω–Ω—è: –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ reverse() —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö.

// function reverseInPlace(arr) {
//   let left = 0;
//   let right = arr.length - 1;

//   while (left < right) {
//     let temp = arr[left];
//     arr[left] = arr[right];
//     arr[right] = temp;
//     left++;
//     right--;
//   }

//   return arr;
// }

// let arr = [1, 2, 3, 4, 5];

// console.log(reverseInPlace(arr)); // [5, 4, 3, 2, 1]

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ó—Å—É–≤ –º–∞—Å–∏–≤—É (—Ü–∏–∫–ª—ñ—á–Ω–∏–π)
// –û–ø–∏—Å: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–º—ñ—â—É—î –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É –≤–ø—Ä–∞–≤–æ –Ω–∞ k –ø–æ–∑–∏—Ü—ñ–π.
// –û–±–º–µ–∂–µ–Ω–Ω—è: –ù–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤, –∑–º—ñ—â–µ–Ω–Ω—è –º–∞—î –≤—ñ–¥–±—É–≤–∞—Ç–∏—Å—è –Ω–∞ –º—ñ—Å—Ü—ñ.

// function rotateArray(arr, k) {
//     if (k > arr.length) {
//       k = k % arr.length; // –ß—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –ª–∏—à–Ω–∏—Ö –≤—Ä–∞—â–µ–Ω–∏–π
//     }

//     function reversePart(arr, start, end) {
//       while (start < end) {
//         let temp = arr[start];
//         arr[start] = arr[end];
//         arr[end] = temp;
//         start++;
//         end--;
//       }
//     }

//     arr.reverse(); // 1. –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤
//     reversePart(arr, 0, k - 1); // 2. –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ k —ç–ª–µ–º–µ–Ω—Ç–æ–≤
//     reversePart(arr, k, arr.length - 1); // 3. –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å

//     return arr;
//   }

// let nums = [1, 2, 3, 4, 5];
// console.log(rotateArray(nums, 2)); // [4, 5, 1, 2, 3]

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

//  –ù–∞–π–¥–æ–≤—à–∏–π –∑—Ä–æ—Å—Ç–∞—é—á–∏–π –ø—ñ–¥–º–∞—Å–∏–≤
// –û–ø–∏—Å: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–¥–æ–≤—à–∏–π –ø—ñ–¥–º–∞—Å–∏–≤, –¥–µ –µ–ª–µ–º–µ–Ω—Ç–∏ –π–¥—É—Ç—å —É –ø–æ—Ä—è–¥–∫—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è.

// function longestIncreasingSubarray(arr) {
//     // –¢–≤—ñ–π –∫–æ–¥ —Ç—É—Ç
// }

// console.log(longestIncreasingSubarray([1, 2, 2, 3, 4, 1, 7, 8]));
// [1, 7, 8] –∞–±–æ [2, 3, 4] (–æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤)

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

//  –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
// –û–ø–∏—Å: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ–º—É –º–∞—Å–∏–≤—ñ –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø–∞–º'—è—Ç—ñ.
// –û–±–º–µ–∂–µ–Ω–Ω—è: –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Set.

// function countUniqueSorted(arr) {
//     // –¢–≤—ñ–π –∫–æ–¥ —Ç—É—Ç
// }

// console.log(countUniqueSorted([1, 1, 2, 2, 3, 3, 3, 4, 5]));  // 5

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

//  –ó–Ω–∞–π—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç —É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ
// –û–ø–∏—Å: –î–∞–Ω –º–∞—Å–∏–≤ –¥–æ–≤–∂–∏–Ω–æ—é n-1, —â–æ –º—ñ—Å—Ç–∏—Ç—å —á–∏—Å–ª–∞ –≤—ñ–¥ 1 –¥–æ n, –∞–ª–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –æ–¥–Ω–µ —á–∏—Å–ª–æ. –ó–Ω–∞–π–¥–∏ –≤—ñ–¥—Å—É—Ç–Ω—î —á–∏—Å–ª–æ.
// –û–±–º–µ–∂–µ–Ω–Ω—è: O(n) –∑–∞ —á–∞—Å–æ–º —ñ O(1) –∑–∞ –ø–∞–º‚Äô—è—Ç—Ç—é.

// function findMissingNumber(arr, n) {
//     // –¢–≤—ñ–π –∫–æ–¥ —Ç—É—Ç
// }

// console.log(findMissingNumber([1, 2, 4, 5, 6], 6));  // 3

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –≤—Å—ñ –Ω—É–ª—ñ –≤ –∫—ñ–Ω–µ—Ü—å
// –û–ø–∏—Å: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–º—ñ—â—É—î –≤—Å—ñ 0 —É –º–∞—Å–∏–≤—ñ –≤ –π–æ–≥–æ –∫—ñ–Ω–µ—Ü—å, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø–æ—Ä—è–¥–æ–∫ —ñ–Ω—à–∏—Ö —á–∏—Å–µ–ª.
// –û–±–º–µ–∂–µ–Ω–Ω—è: –ù–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤.

// function moveZeros(arr) {
//     let nonZeroIndex = 0;

//     for (let i = 0; i < arr.length; i++) {
//       if (arr[i] !== 0) {
//         if (i !== nonZeroIndex) {
//           let temp = arr[nonZeroIndex];
//           arr[nonZeroIndex] = arr[i];
//           arr[i] = temp;
//         }
//         nonZeroIndex++;
//       }
//     }

//     return arr;
//   }

// let nums = [0, 1, 0, 3, 12];
// console.log(moveZeros(nums)); // [1, 3, 12, 0, 0]

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –£–º–æ–≤–∞: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é customSlice(arr, start, end), —è–∫–∞ –ø—Ä–∞—Ü—é—î —è–∫ Array.prototype.slice()

// function mySlice(arr, start, end) {
//   let result = [];

//   // –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤—ñ–¥'—î–º–Ω–∏—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤
//   if (start < 0) start = arr.length + start;
//   if (end < 0) end = arr.length + end;

//   // –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ start —ñ end –≤ –º–µ–∂–∞—Ö
//   start = Math.max(0, start);
//   end = Math.min(arr.length, end);

//   arr.forEach((element, index) => {
//     if (index >= start && index < end) {
//       result.push(element);
//     }
//   });

//   return result;
// }

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é mySplice(arr, start, deleteCount, ...items), —è–∫–∞:

// –≤–∏–¥–∞–ª—è—î deleteCount –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ —ñ–Ω–¥–µ–∫—Å—É start,

// –¥–æ–¥–∞—î –Ω–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ (...items) —É —Ç–µ —Å–∞–º–µ –º—ñ—Å—Ü–µ,

// –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –≤–∏–¥–∞–ª–µ–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤,

// –∑–º—ñ–Ω—é—î –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤ arr.

// function mySplice(arr, start, deleteCount, ...items) {

// }

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// const array = [1, 2, 3];

// function myForEach(array, callback) {
//   for (let i = 0; i < array.length; i++) {
//     callback(array[i], i, array);
//   }
// }

// console.log(myForEach());

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é myMap(arr, callback), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–µ—Ç–æ–¥—É map.

// –£—Å–ª–æ–≤–∏—è:
// –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ arr.

// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é callback —Å —Ç—Ä–µ–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞, –∏–Ω–¥–µ–∫—Å –∏ —Å–∞–º –º–∞—Å—Å–∏–≤.

// –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ callback –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.

// function myMap(arr, callback) {
//   let result = [];

//   for (let i = 0; i < arr.length; i++) {
//     result.push(callback(arr[i], i, arr));
//   }

//   return result;
// }

// const numbers = [1, 2, 3, 4];

// const squared = myMap(numbers, (num) => num * num);
// console.log(squared);

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω:

// –ü—Ä–æ–π—Ç–∏ –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞.

// –í—ã–∑–≤–∞—Ç—å callback –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.

// –ï—Å–ª–∏ callback –≤–µ—Ä–Ω—É–ª true, —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤.

// –í–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤.

// function myFilter(arr, callback) {
//     let result = [];

//     for (let i = 0; i < arr.length; i++) {
//         if (callback(arr[i], i, arr)) {
//             result.push(arr[i])
//         }
//     }

//     return result;
// }

// const numbers = [1, 2, 3, 4, 5];

// const evenNumbers = myFilter(numbers, (num) => num % 2 === 0);
// console.log(evenNumbers); // [2, 4]

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ó–∞–¥–∞—á–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ reduce:

// –ú–µ—Ç–æ–¥ reduce –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: —Ñ—É–Ω–∫—Ü–∏—é-–∫–æ–ª–±—ç–∫ –∏ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞. –§—É–Ω–∫—Ü–∏—è-–∫–æ–ª–±—ç–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–µ—Ç—ã—Ä–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä, —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç, –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ —Å–∞–º –º–∞—Å—Å–∏–≤.

// –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞–±–æ—Ç—ã reduce —Ç—ã –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∏—Ç—Å—è –ø—É—Ç–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.

// function myReduce(arr, callback, initialValue) {
//   let accamulator = initialValue;

//   for (let i = 0; i < arr.length; i++) {
//     accamulator = callback(accamulator, arr[i], i, arr);
//   }

//   return accamulator;
// }

// const sum = myReduce([1, 2, 3, 4], (acc, curr) => acc + curr, 0);
// console.log(sum); // 10

// const product = myReduce([1, 2, 3, 4], (acc, curr) => acc * curr, 1);
// console.log(product); // 24

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ú–µ—Ç–æ–¥ find –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∫–æ—Ç–æ—Ä—ã–π —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç undefined.

// function myFind(arr, callback) {
//   for (let i = 0; i < arr.length; i++) {
//     if (callback(arr[i], i, arr)) {
//         return arr[i]
//     }
//   }

//   return undefined;
// }

// const arr = [5, 12, 8, 130, 44];

// console.log(myFind(arr, (el) => el > 10));      // 12
// console.log(myFind(arr, (el) => el > 200));     // undefined
// console.log(myFind(arr, (el) => el % 2 === 0)); // 12

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –†–µ–∞–ª—ñ–∑—É–π –º–µ—Ç–æ–¥ myFindIndex(arr, callback), —è–∫–∏–π:

// –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –º–∞—Å–∏–≤—É,

// –≤–∏–∫–ª–∏–∫–∞—î callback(element, index, array) –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞,

// –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞, –¥–ª—è —è–∫–æ–≥–æ callback –ø–æ–≤–µ—Ä—Ç–∞—î true,

// —è–∫—â–æ –∂–æ–¥–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î -1.

// function myFindIndex(arr, callback) {
//     for (let i = 0; i < arr.length; i++) {
//         if (callback(arr[i], i, arr)) {
//             return i;
//         }
//     }

//     return -1;
// }

// const arr = [5, 12, 8, 130, 44];

// console.log(myFindIndex(arr, el => el > 10)); // 1
// console.log(myFindIndex(arr, el => el > 200)); // -1
// console.log(myFindIndex(arr, (el, i) => i === 2)); // 2

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –¶–µ–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å —É–º–æ–≤—É.
// –ü–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ –≤—Å—ñ –ø—Ä–æ–π—à–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —ñ false ‚Äî —è–∫—â–æ —Ö–æ—á –æ–¥–∏–Ω –Ω–µ –ø—Ä–æ–π—à–æ–≤.

// function myEvery(arr, callback) {
//     for (let i = 0; i < arr.length; i++) {
//         if (!callback(arr[i], i, arr)) {
//             return false;
//         }
//     }

//     return true;
// }

// console.log(myEvery([1, 2, 3, 4], x => x > 0)); // true
// console.log(myEvery([1, 2, -3, 4], x => x > 0)); // false
// console.log(myEvery(['a', 'aa', 'aaa'], str => str.length >= 1)); // true
// console.log(myEvery([2, 4, 6], n => n % 2 === 0)); // true
// console.log(myEvery([2, 4, 5], n => n % 2 === 0)); // false

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –†–µ–∞–ª—ñ–∑—É–π —Ñ—É–Ω–∫—Ü—ñ—é mySome(arr, callback), —è–∫–∞:

// –ü–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É –∑ –∫–æ–ª–±–µ–∫—É.
// –ü–æ–≤–µ—Ä—Ç–∞—î false, —è–∫—â–æ –∂–æ–¥–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É.

// function mySome(arr, callback) {
//     for (let i = 0; i < arr.length; i++) {
//         if(callback(arr[i], i, arr)) {
//             return true
//         }
//     }

//     return false;
// }

// console.log(mySome([1, 3, 5], x => x % 2 === 0)); // false
// console.log(mySome([1, 4, 5], x => x % 2 === 0)); // true
// console.log(mySome([], x => x > 0)); // false

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ú–µ—Ç–æ–¥ flat() –≤ JavaScript –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è "–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è" –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –≥–ª—É–±–∏–Ω—É.
// –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏, flat() –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤.

// function myFlat(arr, depth = 1) {
//     let result = [];

//     for (let i = 0; i < arr.length; i++) {
//         const current = arr[i];

//         if(Array.isArray(current) && depth > 0) {
//             result = result.concat(myFlat(current, depth - 1))
//         } else {
//             result.push(current)
//         }
//     }

//     return result;
// }

// const arr = [1, 2, [3, 4, [5, 6]]];
// console.log(arr.flat()); // [1, 2, 3, 4, [5, 6]]
// console.log(arr.flat(2)); // [1, 2, 3, 4, 5, 6]

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ! –û–¥–Ω–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∑–∞–¥–∞—á ‚Äî —ç—Ç–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ reduceRight().
// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ reduce(), –Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–æ–Ω—Ü–∞ –º–∞—Å—Å–∏–≤–∞.

// function myReduceRight(arr, callback, initialValue) {
//     let acc;
//     let startIndex;

//     if (initialValue === undefined) {
//         acc = arr[arr.length - 1]
//         startIndex = arr.length - 2;
//     } else {
//         initialValue = arr[arr.length - 1]
//     }

//     for (let i = startIndex; i >= 0; i--) {
//         acc = callback(arr[i], i, arr)
//     }

//     return acc;
// }

// const arr = [1, 2, 3, 4];

// const result = myReduceRight(arr, (acc, currentValue) => {
//     return acc + currentValue;
// }, 0);

// console.log(result); // 10 (4 + 3 + 2 + 1)

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ myFill

// –£–º–æ–≤–∏:

// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤.

// –ú–∞—î –ø—Ä–∏–π–º–∞—Ç–∏ value, start, end.

// –ü–æ–≤–µ—Ä—Ç–∞—î —Ç–æ–π —Å–∞–º–∏–π –º–∞—Å–∏–≤, –º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π.

// function myFill(arr, value, start = 0, end = arr.length) {
//     for (let i = start; i < end; i++) {
//         arr[i] = value;
//     }

//     return arr;
// }

// const a = [1, 2, 3, 4, 5];
// console.log(myFill(a, 0, 1, 4)); // [1, 0, 0, 0, 5]

// const b = [1, 2, 3];
// console.log(myFill(b, 7)); // [7, 7, 7]

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ú–µ—Ç–æ–¥ includes() –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º—ñ—Å—Ç–∏—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è —É –º–∞—Å–∏–≤—ñ, —ñ –ø–æ–≤–µ—Ä—Ç–∞—î true –∞–±–æ false.

// function myIncludes(arr, searchElement, fromIndex = 0) {
//     let minusIndex;

//     if (fromIndex < 0) {
//         minusIndex = arr.length + fromIndex;
//         if (fromIndex < 0) fromIndex = 0;
//     }

//     for (let i = fromIndex; i < arr.length; i++) {
//         if (arr[i] === searchElement) {
//             return true
//         }
//     }

//     return false;
// }

// console.log(myIncludes([1, 2, 3], 2));         // true
// console.log(myIncludes([1, 2, 3], 4));         // false
// console.log(myIncludes([1, 2, 3], 3, 3));      // false
// console.log(myIncludes([1, 2, 3], 3, -1));     // true
// console.log(myIncludes(['a', 'b', 'c'], 'a')); // true

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é groupBy, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ —ñ —Ñ—É–Ω–∫—Ü—ñ—é-–∫–ª—é—á (callback). –í–æ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –æ–±‚Äô—î–∫—Ç, —É —è–∫–æ–º—É –µ–ª–µ–º–µ–Ω—Ç–∏ –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫–ª–∏–∫—É callback.

// function groupBy(arr, callback) {
//     let obj = {};

//     for (let i = 0; i < arr.length; i++) {
//         const key = callback(arr[i]);

//         if (!obj[key]) {
//             obj[key] = [];
//         }

//         obj[key].push(arr[i])
//     }

//     return obj
// }

// const data = [
//   { name: "Alice", age: 21 },
//   { name: "Bob", age: 25 },
//   { name: "Charlie", age: 21 },
//   { name: "David", age: 25 },
//   { name: "Eve", age: 30 },
// ];

// const result = groupBy(data, (person) => person.age);

// console.log(result)
/*
  –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
  {
    21: [{ name: 'Alice', age: 21 }, { name: 'Charlie', age: 21 }],
    25: [{ name: 'Bob', age: 25 }, { name: 'David', age: 25 }],
    30: [{ name: 'Eve', age: 30 }]
  }
  */

//   ________________________________________________________________________________________________________________________________________________________________________________________________________________

//   –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é countBy(arr, callback), —è–∫–∞:

// –ø–µ—Ä–µ–±–∏—Ä–∞—î –º–∞—Å–∏–≤,

// –≥—Ä—É–ø—É—î –µ–ª–µ–º–µ–Ω—Ç–∏ –∑–∞ –∫–ª—é—á–µ–º, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î callback,

// —Ä–∞—Ö—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É –∫–æ–∂–Ω—ñ–π –≥—Ä—É–ø—ñ,

// –ø–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –¥–ª—è –∫–æ–∂–Ω–æ—ó –≥—Ä—É–ø–∏.

// function countBy(arr, callback) {
//   let grouped = {};

//   for (let i = 0; i < arr.length; i++) {
//     const key = callback(arr[i]);

//     if (!grouped[key]) {
//       grouped[key] = 1;
//     } else {
//       grouped[key]++;
//     }
//   }

//   return grouped;
// }

// const data = [6.1, 4.2, 6.3, 5.5, 5.1, 4.8];

// const result = countBy(data, Math.floor);

// console.log(result);

// ________________________________________________________________________________________________________________________________________________________________________________________________________________

// –†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –≤ –æ–¥–∏–Ω –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤.

// function myFlatten(arr, depth = 1) {
//     let result = [];

//     for (let i = 0; i < arr.length; i++) {
//         const current = arr[i]
//         if (Array.isArray(current) && depth > 0) {
//             result.push(...myFlatten(current, depth - 1))
//         } else {
//             result.push(current)
//         }
//     }

//     return result;
// }

// const arr = [1, [2, 3], [4, [5, 6]], 7];
// console.log(myFlatten(arr));
